#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <input/processors/sensor_rotation.dtsi>
#include "../../../config/KobitoKey_rotation.dtsi"
#include "KobitoKey-layouts.dtsi"

/ {
    /* 行列スキャン：rowは左右共通、colは左右で分ける */
    kscan0: kscan0 {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;

        /* Dピンは &xiao_d <番号> で指定（XIAOフォーマット） */
        row-gpios = <&xiao_d 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>, /* 例: D0 */
                    <&xiao_d 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>, /* 例: D1 */
                    <&xiao_d 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>, /* 例: D2 */
                    <&xiao_d 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>; /* 例: D3 */
        col-gpios = <&xiao_d 10 GPIO_ACTIVE_HIGH>, 
                    <&xiao_d 9 GPIO_ACTIVE_HIGH> , 
                    <&xiao_d 8 GPIO_ACTIVE_HIGH> , 
                    <&xiao_d 7 GPIO_ACTIVE_HIGH> , 
                    <&gpio0 10 GPIO_ACTIVE_HIGH> ; 
    };

    /* 左右合体で 4行×10列（左0..4, 右5..9） */
    default_transform: keymap_transform0 {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <10>;
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)   RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)   RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)   RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4)   RC(3,5) RC(3,6) RC(3,7) RC(3,8) RC(3,9)
        >;
    };

    /* 右側トラックボールを split 入力として扱う（ID=0） */
    split_inputs {
        #address-cells = <1>;
        #size-cells = <0>;

        tb_right_split: tb_right_split@0 {
            compatible = "zmk,input-split";
            reg = <0>;
        };
    };

    /* リスナー（中央で有効化。周辺から来た入力もここで処理） */
    tb_left_listener: tb_left_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
    };

    tb_right_listener: tb_right_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
        device = <&tb_right_split>;
        
    };
};

/ {
    sensor_rotation_left: sensor-rotation-left {
        compatible = "zmk,input-processor-sensor-rotation";
        status = "okay";
        #input-processor-cells = <0>;
        rotation-angle = <KOBITOKEY_LEFT_ROTATION>;
    };

    sensor_rotation_right: sensor-rotation-right {
        compatible = "zmk,input-processor-sensor-rotation";
        status = "okay";
        #input-processor-cells = <0>;
        rotation-angle = <KOBITOKEY_RIGHT_ROTATION>;
    };

    /* ★ 単体の物理レイアウト定義（Studio不要の最小形） */
    physical_layout0: physical_layout_0 {
        compatible = "zmk,physical-layout";
        display-name = "Default Layout";

        /* 既に定義済みの kscan と matrix transform を参照 */
        kscan = <&kscan0>;
        transform = <&default_transform>;
    };

    /* ★ デフォルトで使うレイアウトを chosen で指す */
    chosen {
        zmk,physical-layout = &physical_layout0;
    };
};

&uicr {
    /* NFCT ピンを GPIO として利用する */
    nfct-pins-as-gpios;
};
